buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

apply plugin: 'forge'
apply plugin: 'java'
compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}
apply plugin: 'maven-publish'
apply plugin: 'curseforge'

group = "com.thenemex.enderzoo"
archivesBaseName = "[${minecraft_version}] EnderZooPatched"
version = "${mod_version}"

if (project.hasProperty('mod_appendix'))
    version += "_${project.mod_appendix}"

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = 'run'

    replace "@VERSION@", project.version
    replaceIn "EnderZoo.java"
}

configurations {
    compile.extendsFrom exportedCompile
}

repositories {
    mavenCentral()
}

repositories {
    mavenCentral()
    maven { url "http://mobiusstrip.eu/maven" }
    maven { url = "http://chickenbones.net/maven/" }
}

dependencies {
    compile files('libs/Waila-1.5.5_1.7.10/jar')
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'resources'
        }
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

jar {
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from { configurations.exportedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    classifier = 'dev'
}

build.dependsOn sourceJar, deobfJar, javadocJar

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar
            artifact javadocJar
            artifact deobfJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

String getChangelogText() {
    def changelogFile = new File('ReleaseNotes.txt')
    String str = ''
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {return}
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    return str
}

curse {
    dependsOn 'reobf'
    
    onlyIf {
        return project.hasProperty('cp_curseforge_key') && System.getenv("CURSE") != null && System.getenv("CURSE").equalsIgnoreCase("true")
    }

    if (project.hasProperty('cp_curseforge_key')) apiKey = project.curseforge_key
    projectId = project.curse_projectId
    changelog = System.getenv("CHANGELOG").equals("none") ? getChangelogText() : System.getenv("CHANGELOG")
    releaseType = project.hasProperty('mod_appendix') ? "${mod_appendix}".toString() : 'release'
    additionalArtifact deobfJar, sourceJar
}